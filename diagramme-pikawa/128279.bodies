class Cafetiere
!!!129431.cpp!!!	initialiserNomCapsules() : void
    this->nomCapsules = preparation->getNomCapsules();
!!!129559.cpp!!!	initiatiserNomLongueurs() : void
    this->nomLongueurs = preparation->getNomLongueurs();
!!!129687.cpp!!!	chargerPreferences(in identifiantUtilisateur : QString) : void
    qDebug() << Q_FUNC_INFO << identifiantUtilisateur;
    QString requete =
      "SELECT Preferences.idPreferences, Utilisateur.idUtilisateur, "
      "Utilisateur.nom, Utilisateur.prenom, Capsule.idCapsule, "
      "Capsule.designation, Capsule.libelle, TypeBoisson.idTypeBoisson, "
      "TypeBoisson.type FROM Preferences INNER JOIN Utilisateur ON "
      "Utilisateur.idUtilisateur=Preferences.idUtilisateur INNER JOIN Capsule "
      "ON Capsule.idCapsule=Preferences.capsuleActuelle INNER JOIN TypeBoisson "
      "ON TypeBoisson.idTypeBoisson=Preferences.typeBoissonActuelle WHERE "
      "Utilisateur.identifiant='" +
      identifiantUtilisateur + "';";
    baseDeDonneesPikawa->recuperer(requete, preferences);
    qDebug() << Q_FUNC_INFO << preferences;
!!!129943.cpp!!!	gererEvenementsCommunication() : void
    connect(communication,
            SIGNAL(cafetiereDetectee(QString, QString)),
            this,
            SIGNAL(cafetiereDetectee(QString, QString)));
    connect(communication,
            SIGNAL(cafetiereConnectee(QString, QString)),
            this,
            SLOT(mettreAJourConnexion(QString, QString)));
    connect(communication,
            SIGNAL(cafetiereDeconnectee()),
            this,
            SIGNAL(cafetiereDeconnectee()));
    connect(communication,
            SIGNAL(rechercheTerminee(bool)),
            this,
            SIGNAL(rechercheTerminee(bool)));
    connect(communication,
            SIGNAL(etatCafetiere(int, bool, bool, bool)),
            this,
            SLOT(mettreAJourEtatCafetiere(int, bool, bool, bool)));
    connect(communication,
            SIGNAL(etatMagasin(QStringList)),
            this,
            SLOT(mettreAJourMagasin(QStringList)));
    connect(communication,
            SIGNAL(cafeEnPreparation(int)),
            this,
            SLOT(gererEtatPreparationCafe(int)));
!!!130071.cpp!!!	ouvrirBaseDeDonnees() : void
    baseDeDonneesPikawa = BaseDeDonnees::getInstance();
    baseDeDonneesPikawa->ouvrir(NOM_BDD);
!!!130199.cpp!!!	Cafetiere(inout ihm : IHMPikawa)
    // qDebug() << Q_FUNC_INFO << qApp->applicationFilePath();
    ouvrirBaseDeDonnees();
    gererEvenements();
    gererEvenementsCommunication();
    /**
     * @todo Gérer l'utilisateur connecté (identifiant ou badge) à cette
     * cafetière
     */
    chargerPreferences(IDENTIFIANT_UTILISATEUR);
    initialiserNomCapsules();
    initiatiserNomLongueurs();
!!!130327.cpp!!!	~Cafetiere()
    BaseDeDonnees::detruireInstance();
    qDebug() << Q_FUNC_INFO;
!!!130455.cpp!!!	getNomcapsules() : QStringList
    return nomCapsules;
!!!130583.cpp!!!	getNomLongueurs() : QStringList
    return nomLongueurs;
!!!130711.cpp!!!	getCaspuleChoisie() : int
    return capsuleChoisie;
!!!130839.cpp!!!	getLongueurChoisie() : int
    return longueurChoisie;
!!!130967.cpp!!!	getNiveauEau() : int
    return niveauEau;
!!!131095.cpp!!!	getNiveauEauNecessaire() : int
    return preparation->getNiveauEauNecessaire();
!!!131223.cpp!!!	getConnectee() : bool
    return connectee;
!!!131351.cpp!!!	getActivee() : bool
    return activee;
!!!131479.cpp!!!	getCapsulePresente() : bool
    return capsulePresente;
!!!131607.cpp!!!	getTassePresente() : bool
    return tassePresente;
!!!131735.cpp!!!	getIdCapsule(in nomCapsule : QString) : int
    if(nomCapsules.isEmpty() || nomCapsule.isEmpty())
        return -1;
    return nomCapsules.indexOf(nomCapsule);
!!!131863.cpp!!!	getPreferences() : QStringList
    return preferences;
!!!131991.cpp!!!	getCapsulePreferee() : QString
    if(!preferences.isEmpty())
    {
        qDebug() << Q_FUNC_INFO
                 << preferences.at(Cafetiere::ChampsTablePreferences::
                                     COLONNE_PREFERENCES_DESIGNATION_CAPSULE);
        return preferences.at(Cafetiere::ChampsTablePreferences::
                                COLONNE_PREFERENCES_DESIGNATION_CAPSULE);
    }
    return QString();
!!!132119.cpp!!!	getLongueurPreferee() : QString
    if(!preferences.isEmpty())
    {
        qDebug() << Q_FUNC_INFO
                 << preferences.at(Cafetiere::ChampsTablePreferences::
                                     COLONNE_PREFERENCES_TYPE_BOISSON);
        return preferences.at(
          Cafetiere::ChampsTablePreferences::COLONNE_PREFERENCES_TYPE_BOISSON);
    }
    return QString();
!!!132247.cpp!!!	setCapsuleChoisie(in capsuleChoisie : int) : void
    if(this->capsuleChoisie != capsuleChoisie)
    {
        this->capsuleChoisie = capsuleChoisie;
        QString requete      = "UPDATE Preferences SET capsuleActuelle='" +
                          QString::number(capsuleChoisie + 1) +
                          "' WHERE Preferences.idUtilisateur='" +
                          IDENTIFIANT_UTILISATEUR_ID + "'";
        baseDeDonneesPikawa->executer(requete);
    }
!!!132375.cpp!!!	setLongueurChoisie(in longueurChoisie : int) : void
    preparation->setNiveauEauNecessaire(longueurChoisie);
    this->longueurChoisie = longueurChoisie;
    if(this->longueurChoisie != capsuleChoisie)
    {
        this->longueurChoisie = longueurChoisie;
        QString requete       = "UPDATE Preferences SET typeBoissonActuelle='" +
                          QString::number(longueurChoisie + 1) +
                          "' WHERE Preferences.idUtilisateur='" +
                          IDENTIFIANT_UTILISATEUR_ID + "'";
        baseDeDonneesPikawa->executer(requete);
    }
!!!132503.cpp!!!	setNiveauEau(in niveauEau : int) : void
    this->niveauEau = niveauEau;
!!!132631.cpp!!!	estPrete() : bool
    qDebug() << Q_FUNC_INFO << "estPreparationPrete"
             << preparation->estPreparationPrete() << "estCafeEnPreparation"
             << estCafeEnPreparation << "estCapsuleChoisieDisponible"
             << estCapsuleChoisieDisponible();
    if(preparation->estPreparationPrete() && communication->estConnecte() &&
       !estCafeEnPreparation && estCapsuleChoisieDisponible())
    {
        emit cafetierePrete();
        qDebug() << Q_FUNC_INFO << "Prête";
        return true;
    }
    else
    {
        emit cafetierePasPrete();
        qDebug() << Q_FUNC_INFO << "Pas prête";
        return false;
    }
!!!132759.cpp!!!	getDisponibiliteCapsules() : QStringList
    QString     requete = "SELECT quantite FROM StockMagasin";
    QStringList caspuleDisponibles;
    baseDeDonneesPikawa->recuperer(requete, caspuleDisponibles);
    return caspuleDisponibles;
!!!132887.cpp!!!	estCapsuleChoisieDisponible() : bool
    QString requete = "SELECT quantite FROM StockMagasin WHERE rangee = " +
                      QString::number(capsuleChoisie + 1);
    QString reponseQuantite = "";

    baseDeDonneesPikawa->recuperer(requete, reponseQuantite);
    qDebug() << Q_FUNC_INFO << "cafeChoisie" << capsuleChoisie
             << "reponseQuantite " << reponseQuantite;
    if(reponseQuantite.toInt() <= 1)
    {
        return true;
    }
    else
    {
        return false;
    }
!!!133015.cpp!!!	demarrerDecouverte() : void
    qDebug() << Q_FUNC_INFO;
    communication->activerLaDecouverte();
!!!133143.cpp!!!	arreterDecouverte() : void
    qDebug() << Q_FUNC_INFO;
    communication->desactiverLaDecouverte();
!!!133271.cpp!!!	rafraichirDecouverte() : void
    qDebug() << Q_FUNC_INFO;
    communication->desactiverLaDecouverte();
    communication->activerLaDecouverte();
!!!133399.cpp!!!	gererConnexion() : void
    qDebug() << Q_FUNC_INFO;
    if(communication->estConnecte())
        communication->deconnecter();
    else
        communication->connecter();
!!!133527.cpp!!!	mettreAJourConnexion(in nom : QString, in adresse : QString) : void
    emit cafetiereConnectee(nom, adresse);
    recupererEtatCafetiere();
    recupererEtatMagasin();
!!!133655.cpp!!!	recupererEtatCafetiere() : void
    communication->envoyerTrame("$PIKAWA;ETAT;C;\r\n");
!!!133783.cpp!!!	recupererEtatMagasin() : void
    communication->envoyerTrame("$PIKAWA;ETAT;M;\r\n");
!!!133911.cpp!!!	mettreAJourEtatCafetiere(in reservoirEau : int, in bacCapsules : bool, in etatCapsule : bool, in etatTasse : bool) : void
    qDebug() << Q_FUNC_INFO << reservoirEau << bacCapsules << etatCapsule
             << etatTasse;

    this->setNiveauEau(reservoirEau);
    preparation->setBacPlein(!bacCapsules);
    preparation->setCapsulePresente(etatCapsule);
    preparation->setTassePresente(etatTasse);

    qDebug() << Q_FUNC_INFO << estPrete();

    emit etatCafetiere(reservoirEau, bacCapsules, etatCapsule, etatTasse);
!!!134039.cpp!!!	mettreAJourMagasin(in caspulesDisponibles : QStringList) : void
    qDebug() << Q_FUNC_INFO << caspulesDisponibles;
    QString requete;
    for(int i = 0; i < caspulesDisponibles.size(); ++i)
    {
        requete =
          "UPDATE StockMagasin SET quantite=" + caspulesDisponibles.at(i) +
          " WHERE rangee=" + QString::number((i + 1));
        baseDeDonneesPikawa->executer(requete);
    }
    emit etatMagasinIHM(caspulesDisponibles);
    estPrete();
!!!134167.cpp!!!	gererEtatPreparationCafe(in preparationCafe : int) : void
    qDebug() << Q_FUNC_INFO << preparationCafe;
    if(preparationCafe == CAFE_PRET)
    {
        this->estCafeEnPreparation = false;
        emit cafePret();
    }
    else if(preparationCafe == CAFE_EN_PREPARATION)
    {
        this->estCafeEnPreparation = true;
        emit cafeEnCours();
    }
    else
    {
        this->estCafeEnPreparation = false;
        emit erreurPreparation();
    }
!!!134295.cpp!!!	lancerLaPreparationCafe() : void
    communication->envoyerTramePreparation(capsuleChoisie, longueurChoisie);
    /**
     * @todo Est-ce vraiment utile ? Les trames d'états sont envoyées
     * automatiquement par la cafetière !
     */
    recupererEtatCafetiere();
    recupererEtatMagasin();
